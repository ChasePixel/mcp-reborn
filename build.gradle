buildscript {
    repositories {
        mavenLocal()
        maven { url = 'https://files.minecraftforge.net/maven' } // Changed to HTTPS
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.1.+'
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '6.0.0'
    id 'java'
}

sourceCompatibility = '15'
targetCompatibility = '15'

import net.minecraftforge.forge.tasks.*

apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle.patcher'
apply plugin: 'groovy'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

configurations {
    shade
    compile.extendsFrom shade
}

java {
    sourceCompatibility = JavaVersion.VERSION_15
    targetCompatibility = JavaVersion.VERSION_15
}



group = 'me.yourname'
version = '1.0.0'

ext {
    minecraft_version = '1.16.5'
    mcp_version = '20210115.111550'
    mappings_channel = 'official'
    mappings_version = '1.16.5'
    spi_version = '3.2.0'
}


repositories {
    mavenCentral()
}

dependencies {
    shade 'net.minecraftforge:forgespi:' + spi_version
    shade 'org.codehaus.groovy:groovy:3.0.9'
    implementation 'org.codehaus.groovy:groovy:3.0.9'
    implementation 'org.jetbrains:annotations:24.0.1'
    implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-M1.1'
    implementation 'org.deeplearning4j:rl4j-core:1.0.0-M1.1'
    implementation 'org.slf4j:slf4j-simple:1.7.30'

    implementation 'org.nd4j:nd4j-native-platform:1.0.0-M1.1'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-math3
    implementation 'org.apache.commons:commons-math3:3.6.1'




    implementation 'org.json:json:20210307'
//    Use the shade to add the lib to the jar
//    or use compile if you want to load the lib from the version.json
//    from a maven repo
//    shade 'package-here'
//    compile 'package-here'
}

project(':mcp') {
    apply plugin: 'net.minecraftforge.gradle.mcp'
    mcp {
        config = minecraft_version + '-' + mcp_version
        pipeline = 'joined'
    }
}

evaluationDependsOn(':mcp')

patcher {
    parent = project(':mcp')
    patchedSrc = file('src/main/java')
    mappings channel: mappings_channel, version: mappings_version
    mcVersion = minecraft_version
}

shadowJar {
    archiveClassifier.set('all')
    configurations = [project.configurations.shade]
    mergeServiceFiles()
    from(sourceSets.main.resources.srcDirs) {
        include '**/*'
    }
    from('src/main/resources') {
        include '**/*'
    }
}

jar {
    configurations.shade.each { dep ->
        from(project.zipTree(dep)) {
            exclude 'META-INF', 'META-INF/**'
        }
    }
}

task runclient(type: JavaExec) {
    group = "MCP"
    description = "Runs the client"
    classpath sourceSets.main.runtimeClasspath
    if (System.getProperty("os.name").toLowerCase().contains("mac")) {
        jvmArgs '-XstartOnFirstThread'
    }
    args '--gameDir', '.'
    args '--version', minecraft_version
    args '--assetsDir', downloadAssets.output
    args '--assetIndex', "1.16"
    args '--username', "ChasePixel_"
    args '--accessToken', '0'
    main 'net.minecraft.client.main.Main'
    workingDir 'run'
}

task setup() {
    group = "MCP"
    description = "Setups the dev workspace"
    dependsOn ':extractMapped'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}

task copyAssets {
    group = "MCP"
    description = "Download and place the assets into the run folder"
    dependsOn ':downloadAssets'
    mkdir 'run/assets'
    copy {
        from downloadAssets.output.path
        into 'run/assets'
    }
}
